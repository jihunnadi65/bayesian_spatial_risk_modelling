# verify that 0s are gone
print(adj_list[m=, c(59, 177, 184, 190])])  # should no longer contain 0
# verify that 0s are gone
print(adj_list[m=, c(59, 177, 184, 190)])  # should no longer contain 0
# verify that 0s are gone
print(adj_list[, c(59, 177, 184, 190)])  # should no longer contain 0
# verify that 0s are gone
nodes_to_check <- c(59, 177, 184, 190)
print(adj_list[nodes_to_check])
print(adj_list[nodes_to_check])
# recompute the graph after linking all subgraphs
graph_adj <- graph_from_adj_list(adj_list, mode = "all")
subgraph_labels <- components(graph_adj)$membership
model_df$subgraph <- as.factor(subgraph_labels)
# check if any disconnected subgraphs remain
remaining_disconnected <- unique(subgraph_labels[subgraph_labels != largest_subgraph])
if (length(remaining_disconnected) == 0) {
message("All regions are now fully connected.")
} else {
message("Some subgraphs are still disconnected: ", paste(remaining_disconnected, collapse = ", "))
}
# visualise the updated subgraph connectivity
ggplot() +
geom_sf(data = model_df, aes(fill = as.factor(subgraph_labels)), color = "black") +
scale_fill_viridis_d(option = "turbo", name = "Subgraph") +
ggtitle("Updated Subgraph Connectivity in South Korea") +
theme_minimal()
# convert the updated graph to an adjacency matrix
adjacency_matrix <- as_adjacency_matrix(graph_adj, sparse = TRUE)
adjacency_matrix <- Matrix::Matrix(as(adjacency_matrix, "sparseMatrix") > 0, sparse = TRUE)
adjacency_matrix
print(adj_list[[184]])
# extract the components for the ICAR model using the prep_icar_data function
extract_components <- prep_icar_data(adjacency_matrix)
View(extract_components)
# the extract_components object contains the following key elements:
# group_size is the total number of areal units observed in the shapefile
# node1 are indexes of the regions of interest - the focal areas in the adjacency matrix
# node2 shows corresponding neighbouring regions that are connected to the regions in node1. This defines spatial relationships
# n_edges represents the number of edges in the network, defining the spatial connections. It transforms the adjacency matrix (based on a Queen contiguity matrix) into a network structure showing which areas are directly connected to others
# extract key elements
n <- as.numeric(extract_components$group_size)
nod1 <- extract_components$node1
nod2 <- extract_components$node2
n_edges <- as.numeric(extract_components$n_ed)
# the outcome suicide_count, independent variables single_person_household_ratio, stress_awareness_rate, unemployment_rate, unmet_medical_needs_rate, and the offset variable expected_num need to be extracted into separate vectors
y <- model_df$suicide_count # outcome variable (suicide casualties)
# extract multiple independent variables into a matrix
X <- model_df %>%
st_drop_geometry() %>%
dplyr::select(single_person_household_ratio,
unemployment_rate,
unmet_medical_needs_rate) %>%
as.matrix()
e <- model_df$expected_num
stan_spatial_dataset <- list(
N = nrow(model_df) , # number of spatial units
N_edges = n_edges, # number of edges in spatial adjacency structure
node1 = nod1, # first node in adjacency structure
node2 = nod2, # second node in adjacency structure
Y = y, # outcome variable (suicide casualties)
X = X, # matrix of independent variables (3 predictors)
K = ncol(X), # number of independent variables (3)
Off_set = e # offset variable (expected_num)
)
# inspect
stan_spatial_dataset
adjacency_matrix
# Check if node 59 has valid edges in adjacency_matrix
print(which(adjacency_matrix[59, ] > 0))  # Should show at least one connection
print(which(adjacency_matrix[, 59] > 0))  # Should also show at least one connection
# Check if node 59 has valid edges in adjacency_matrix
print(which(adjacency_matrix[177, ] > 0))  # Should show at least one connection
# Check if node 59 has valid edges in adjacency_matrix
print(which(adjacency_matrix[1200, ] > 0))  # Should show at least one connection
# Check if node 59 has valid edges in adjacency_matrix
print(which(adjacency_matrix[200, ] > 0))  # Should show at least one connection
# Check if node 59 has valid edges in adjacency_matrix
print(which(adjacency_matrix[59, ] > 0))  # Should show at least one connection
print(59 %in% V(graph_adj))
print(E(graph_adj)[from(59)]$to)  # Should return at least one neighbor
print(E(graph_adj)[.from(59)]$to)  # Should return at least one neighbor
print(E(graph_adj)[.to(59)]$from)  # Should also return at least one neighbor
print(adj_list[[59]])  # Should show at least one neighbor
# Ensure 59 and 58 reference each other
print(adj_list[[59]])  # Should contain 58
print(adj_list[[58]])  # Should contain 59
print(adj_list[nodes_to_check])
edges <- data.frame(from = node1, to = node2)
edges <- data.frame(from = nod1, to = nod2)
# Build graph from edge list
graph_adj <- graph_from_data_frame(edges, directed = FALSE)
# Check the number of **connected components**
components <- components(graph_adj)
print(components$no)  # Number of separate subgraphs
# enable parallel processing in RStudio for Stan
# parallel::detectCores() automatically detects the number of CPU cores available on my local machine
options(mc.cores = parallel::detectCores())
# rtan_options(auto_write = TRUE) saves compiled models to avoid redundant compilation
rstan_options(auto_write = TRUE)
stan_spatial_dataset <- list(
N = nrow(model_df) , # number of spatial units
N_edges = n_edges, # number of edges in spatial adjacency structure
node1 = nod1, # first node in adjacency structure
node2 = nod2, # second node in adjacency structure
Y = y, # outcome variable (suicide casualties)
X = X, # matrix of independent variables (3 predictors)
K = ncol(X), # number of independent variables (3)
Off_set = e # offset variable (expected_num)
)
# inspect
stan_spatial_dataset
# start the clock
ptm <- proc.time()
# fit icar_poisson_stan model
icar_poisson_fit = stan("icar_poisson_model.stan",
data = stan_spatial_dataset,
iter = 12000,
warmup = 6000,
control = list(adapt_delta = 0.99, max_treedepth = 12),
chain = 6,
verbose = FALSE)
# stop the clock
proc.time() - ptm
# we can see our estimated results for alpha, beta, and sigma
options(scipen = 999)
summary(icar_poisson_fit, pars=c("alpha", "beta", "sigma"), probs=c(0.025, 0.975))$summary
model_df_sp <- as(model_df, "Spatial")
model_df_sp <- as(model_df, "Spatial")
# needs to be coerced into a matrix object
adjacencyMatrix <- shape2mat(model_df_sp)
# we extract the components for the ICAR model
extractComponents <- prep_icar_data(adjacencyMatrix)
# extract the components for the ICAR model using the prep_icar_data function
extract_components <- prep_icar_data(adjacency_matrix)
# the extract_components object contains the following key elements:
# group_size is the total number of areal units observed in the shapefile
# node1 are indexes of the regions of interest - the focal areas in the adjacency matrix
# node2 shows corresponding neighbouring regions that are connected to the regions in node1. This defines spatial relationships
# n_edges represents the number of edges in the network, defining the spatial connections. It transforms the adjacency matrix (based on a Queen contiguity matrix) into a network structure showing which areas are directly connected to others
# extract key elements
n <- as.numeric(extract_components$group_size)
nod1 <- extract_components$node1
nod2 <- extract_components$node2
n_edges <- as.numeric(extract_components$n_ed)
# the outcome suicide_count, independent variables single_person_household_ratio, stress_awareness_rate, unemployment_rate, unmet_medical_needs_rate, and the offset variable expected_num need to be extracted into separate vectors
y <- model_df$suicide_count # outcome variable (suicide casualties)
# extract multiple independent variables into a matrix
X <- model_df %>%
st_drop_geometry() %>%
dplyr::select(single_person_household_ratio,
unemployment_rate,
unmet_medical_needs_rate) %>%
as.matrix()
e <- model_df$expected_num
stan_spatial_dataset <- list(
N = nrow(model_df) , # number of spatial units
N_edges = n_edges, # number of edges in spatial adjacency structure
node1 = nod1, # first node in adjacency structure
node2 = nod2, # second node in adjacency structure
Y = y, # outcome variable (suicide casualties)
X = X, # matrix of independent variables (3 predictors)
K = ncol(X), # number of independent variables (3)
Off_set = e # offset variable (expected_num)
)
# inspect
stan_spatial_dataset
# read in a mapping file that converts Korean municipality names to English
kr_to_en_mapping <- read_excel(here::here("mapping", "korean_to_english_mapping.xlsx"))
# merge all predictor variables with the suicide rate data
model_df <- suicide_rate_municipality %>%
# join single-person household ratio
dplyr::left_join(., single_person_household_clean, by=c("name" = "municipality_clean")) %>%
# join stress awareness rate
dplyr::left_join(., stress_awareness_rate_clean, by=c("name" = "municipality_clean")) %>%
# join unemployment rate
dplyr::left_join(., unemployment_rate_clean, by=c("name" = "municipality_clean")) %>%
# join unmet medical needs rate
dplyr::left_join(., unmet_medical_needs_clean, by=c("name" = "municipality_clean")) %>%
# join municipality population data (for expected values & suicide counts)
dplyr::left_join(., municipality_population_2022, by=c("name" = "municipality_clean")) %>%
# join Korean-to-English name mapping
dplyr::left_join(., kr_to_en_mapping, by=c("name" = "municipality_kr")) %>%
# compute additional features
# calculate municipality area (in km²)
dplyr::mutate(., area = as.numeric(set_units(st_area(geometry), "km^2"))) %>%
# calculate population density (people per km²)
dplyr::mutate(population_density_km2 = round((total_population / area),1)) %>%
# calculate estimated suicide count
# we use the suicide rate (per 100,000 people) to estimate actual suicide counts from 2022 population
# round to the nearest integer for modelling purposes
dplyr::mutate(suicide_count = as.integer(round(total_population * suicide_rate / 100000, 0))) %>%
# select rename relevant columns and keep only necessary variables for modelling
dplyr::select(code, municipality_en, suicide_count, single_person_household_ratio, stress_awareness_rate, unemployment_rate, unmet_medical_needs_rate, population_density_km2, total_population) %>%
# rename 'municipality_en' to 'name'
dplyr::rename(name = municipality_en)
# in order to estimate the risk of casualties due to suicide across Korean municipalities, we will need to first obtain a column that contains estimated expected number of casualties. This is derived from the total_population column.
# n.strata = 1 means that no stratification is being applied - the entire dataset is treated as a single stratum
# this will be used as an offset in our spatial model
model_df$expected_num <- round(expected(population = model_df$total_population, cases = model_df$suicide_count, n.strata = 1), 0)
# convert model_df to a spatial object
# poly2nb() from the spdep package works with sp objects, not sf objects
model_df_sp <- as(model_df, "Spatial")
# create standard adjacency matrix using Queen contiguity
# Queen's contiguity considers any shared boundary or shared vertex as a neighbour
# the 'snap = 200' argument ensures that near-touching polygons within 200m are considered contiguous
adj_list <- poly2nb(model_df_sp, queen = TRUE, snap = 200)
# inspect adj_list
# the list has 6 subgraphs and 4 isoalted regions (59, 177, 184, 190) with no links
adj_list
# we need to convert the list-based adjacency strucuture into an igraph object to analyse connected components
graph_adj <- graph_from_adj_list(adj_list, mode = "all")
# identify subgraph components
subgraph_labels <- components(graph_adj)$membership
model_df$subgraph <- as.factor(subgraph_labels)
# find the largest subgraph (mainland Korea)
largest_subgraph <- which.max(table(subgraph_labels))
# identify all smaller disconnected subgraphs
# this returns a list of subgraph IDs
disconnected_subgraphs <- unique(subgraph_labels[subgraph_labels != largest_subgraph])
# inspect disconnected subgraphs
disconnected_subgraphs  # Should return a list of subgraph IDs
# inspect the current state of subgraph connectivity
ggplot() +
geom_sf(data = model_df, aes(fill = as.factor(subgraph_labels)), color = "black") +
scale_fill_viridis_d(option = "turbo", name = "Subgraph")  +
ggtitle("Current Subgraph Connectivity in South Korea") +
theme_minimal()
# convert centroids to an sf object
centroids <- st_centroid(model_df$geometry)
centroids_sf <- st_as_sf(data.frame(id = 1:length(centroids), geometry = centroids))
# iterate through each disconnected subgraph
for (subgraph in disconnected_subgraphs) {
# find polygons in the current subgraph
subgraph_polygons <- which(subgraph_labels == subgraph)
# find polygons in the largest subgraph (mainland)
mainland_polygons <- which(subgraph_labels == largest_subgraph)
# find nearest polygon in the mainland for each polygon in the subgraph
closest_mainland <- st_nearest_feature(centroids_sf[subgraph_polygons, ], centroids_sf[mainland_polygons, ])
# convert closest_mainland to integer indices
closest_mainland <- as.integer(closest_mainland)
# update adjacency list to connect subgraph polygons to mainland
for (i in seq_along(subgraph_polygons)) {
island <- subgraph_polygons[i]
mainland <- closest_mainland[i]
# ensure bidirectional connection
adj_list[[island]] <- unique(c(adj_list[[island]], mainland))
adj_list[[mainland]] <- unique(c(adj_list[[mainland]], island))
}
}
# identify which nodes have invalid `0` entries (0, 58) for example
invalid_nodes <- which(sapply(adj_list, function(x) any(x == 0)))
# Print the invalid nodes
print(invalid_nodes)  # Should show 184, 190, etc.
# Loop through adj_list and remove zeroes
adj_list <- lapply(adj_list, function(x) x[x != 0])
# verify that 0s are gone
nodes_to_check <- c(59, 177, 184, 190)
print(adj_list[nodes_to_check])
# recompute the graph after linking all subgraphs
graph_adj <- graph_from_adj_list(adj_list, mode = "all")
subgraph_labels <- components(graph_adj)$membership
model_df$subgraph <- as.factor(subgraph_labels)
# check if any disconnected subgraphs remain
remaining_disconnected <- unique(subgraph_labels[subgraph_labels != largest_subgraph])
if (length(remaining_disconnected) == 0) {
message("All regions are now fully connected.")
} else {
message("Some subgraphs are still disconnected: ", paste(remaining_disconnected, collapse = ", "))
}
# visualise the updated subgraph connectivity
ggplot() +
geom_sf(data = model_df, aes(fill = as.factor(subgraph_labels)), color = "black") +
scale_fill_viridis_d(option = "turbo", name = "Subgraph") +
ggtitle("Updated Subgraph Connectivity in South Korea") +
theme_minimal()
# convert the updated graph to an adjacency matrix
adjacency_matrix <- as_adjacency_matrix(graph_adj, sparse = TRUE)
adjacency_matrix <- Matrix::Matrix(as(adjacency_matrix, "sparseMatrix") > 0, sparse = TRUE)
adjacency_matrix
# extract the components for the ICAR model using the prep_icar_data function
extract_components <- prep_icar_data(adjacency_matrix)
# the extract_components object contains the following key elements:
# group_size is the total number of areal units observed in the shapefile
# node1 are indexes of the regions of interest - the focal areas in the adjacency matrix
# node2 shows corresponding neighbouring regions that are connected to the regions in node1. This defines spatial relationships
# n_edges represents the number of edges in the network, defining the spatial connections. It transforms the adjacency matrix (based on a Queen contiguity matrix) into a network structure showing which areas are directly connected to others
# extract key elements
n <- as.numeric(extract_components$group_size)
nod1 <- extract_components$node1
nod2 <- extract_components$node2
n_edges <- as.numeric(extract_components$n_ed)
# the outcome suicide_count, independent variables single_person_household_ratio, stress_awareness_rate, unemployment_rate, unmet_medical_needs_rate, and the offset variable expected_num need to be extracted into separate vectors
y <- model_df$suicide_count # outcome variable (suicide casualties)
# extract multiple independent variables into a matrix
X <- model_df %>%
st_drop_geometry() %>%
dplyr::select(single_person_household_ratio,
unemployment_rate,
unmet_medical_needs_rate) %>%
as.matrix()
e <- model_df$expected_num
stan_spatial_dataset <- list(
N = nrow(model_df) , # number of spatial units
N_edges = n_edges, # number of edges in spatial adjacency structure
node1 = nod1, # first node in adjacency structure
node2 = nod2, # second node in adjacency structure
Y = y, # outcome variable (suicide casualties)
X = X, # matrix of independent variables (3 predictors)
K = ncol(X), # number of independent variables (3)
Off_set = e # offset variable (expected_num)
)
# inspect
stan_spatial_dataset
View(graph_adj)
# read in a mapping file that converts Korean municipality names to English
kr_to_en_mapping <- read_excel(here::here("mapping", "korean_to_english_mapping.xlsx"))
# merge all predictor variables with the suicide rate data
model_df <- suicide_rate_municipality %>%
# join single-person household ratio
dplyr::left_join(., single_person_household_clean, by=c("name" = "municipality_clean")) %>%
# join stress awareness rate
dplyr::left_join(., stress_awareness_rate_clean, by=c("name" = "municipality_clean")) %>%
# join unemployment rate
dplyr::left_join(., unemployment_rate_clean, by=c("name" = "municipality_clean")) %>%
# join unmet medical needs rate
dplyr::left_join(., unmet_medical_needs_clean, by=c("name" = "municipality_clean")) %>%
# join municipality population data (for expected values & suicide counts)
dplyr::left_join(., municipality_population_2022, by=c("name" = "municipality_clean")) %>%
# join Korean-to-English name mapping
dplyr::left_join(., kr_to_en_mapping, by=c("name" = "municipality_kr")) %>%
# compute additional features
# calculate municipality area (in km²)
dplyr::mutate(., area = as.numeric(set_units(st_area(geometry), "km^2"))) %>%
# calculate population density (people per km²)
dplyr::mutate(population_density_km2 = round((total_population / area),1)) %>%
# calculate estimated suicide count
# we use the suicide rate (per 100,000 people) to estimate actual suicide counts from 2022 population
# round to the nearest integer for modelling purposes
dplyr::mutate(suicide_count = as.integer(round(total_population * suicide_rate / 100000, 0))) %>%
# select rename relevant columns and keep only necessary variables for modelling
dplyr::select(code, municipality_en, suicide_count, single_person_household_ratio, stress_awareness_rate, unemployment_rate, unmet_medical_needs_rate, population_density_km2, total_population) %>%
# rename 'municipality_en' to 'name'
dplyr::rename(name = municipality_en)
# in order to estimate the risk of casualties due to suicide across Korean municipalities, we will need to first obtain a column that contains estimated expected number of casualties. This is derived from the total_population column.
# n.strata = 1 means that no stratification is being applied - the entire dataset is treated as a single stratum
# this will be used as an offset in our spatial model
model_df$expected_num <- round(expected(population = model_df$total_population, cases = model_df$suicide_count, n.strata = 1), 0)
# convert model_df to a spatial object
# poly2nb() from the spdep package works with sp objects, not sf objects
model_df_sp <- as(model_df, "Spatial")
# create standard adjacency matrix using Queen contiguity
# Queen's contiguity considers any shared boundary or shared vertex as a neighbour
# the 'snap = 200' argument ensures that near-touching polygons within 200m are considered contiguous
adj_list <- poly2nb(model_df_sp, queen = TRUE, snap = 200)
# inspect adj_list
# the list has 6 subgraphs and 4 isoalted regions (59, 177, 184, 190) with no links
adj_list
# we need to convert the list-based adjacency strucuture into an igraph object to analyse connected components
graph_adj <- graph_from_adj_list(adj_list, mode = "all")
# identify subgraph components
subgraph_labels <- components(graph_adj)$membership
model_df$subgraph <- as.factor(subgraph_labels)
# find the largest subgraph (mainland Korea)
largest_subgraph <- which.max(table(subgraph_labels))
# identify all smaller disconnected subgraphs
# this returns a list of subgraph IDs
disconnected_subgraphs <- unique(subgraph_labels[subgraph_labels != largest_subgraph])
# inspect disconnected subgraphs
disconnected_subgraphs  # Should return a list of subgraph IDs
# inspect the current state of subgraph connectivity
ggplot() +
geom_sf(data = model_df, aes(fill = as.factor(subgraph_labels)), color = "black") +
scale_fill_viridis_d(option = "turbo", name = "Subgraph")  +
ggtitle("Current Subgraph Connectivity in South Korea") +
theme_minimal()
# convert centroids to an sf object
centroids <- st_centroid(model_df$geometry)
centroids_sf <- st_as_sf(data.frame(id = 1:length(centroids), geometry = centroids))
# iterate through each disconnected subgraph
for (subgraph in disconnected_subgraphs) {
# find polygons in the current subgraph
subgraph_polygons <- which(subgraph_labels == subgraph)
# find polygons in the largest subgraph (mainland)
mainland_polygons <- which(subgraph_labels == largest_subgraph)
# find nearest polygon in the mainland for each polygon in the subgraph
closest_mainland <- st_nearest_feature(centroids_sf[subgraph_polygons, ], centroids_sf[mainland_polygons, ])
# convert closest_mainland to integer indices
closest_mainland <- as.integer(closest_mainland)
# update adjacency list to connect subgraph polygons to mainland
for (i in seq_along(subgraph_polygons)) {
island <- subgraph_polygons[i]
mainland <- closest_mainland[i]
# ensure bidirectional connection
adj_list[[island]] <- unique(c(adj_list[[island]], mainland))
adj_list[[mainland]] <- unique(c(adj_list[[mainland]], island))
}
}
# identify which nodes have invalid `0` entries (0, 58) for example
invalid_nodes <- which(sapply(adj_list, function(x) any(x == 0)))
# Print the invalid nodes
print(invalid_nodes)  # Should show 184, 190, etc.
# Loop through adj_list and remove zeroes
adj_list <- lapply(adj_list, function(x) x[x != 0])
# verify that 0s are gone
nodes_to_check <- c(59, 177, 184, 190)
print(adj_list[nodes_to_check])
# recompute the graph after linking all subgraphs
graph_adj <- graph_from_adj_list(adj_list, mode = "all")
subgraph_labels <- components(graph_adj)$membership
model_df$subgraph <- as.factor(subgraph_labels)
# check if any disconnected subgraphs remain
remaining_disconnected <- unique(subgraph_labels[subgraph_labels != largest_subgraph])
if (length(remaining_disconnected) == 0) {
message("All regions are now fully connected.")
} else {
message("Some subgraphs are still disconnected: ", paste(remaining_disconnected, collapse = ", "))
}
# visualise the updated subgraph connectivity
ggplot() +
geom_sf(data = model_df, aes(fill = as.factor(subgraph_labels)), color = "black") +
scale_fill_viridis_d(option = "turbo", name = "Subgraph") +
ggtitle("Updated Subgraph Connectivity in South Korea") +
theme_minimal()
View(graph_adj)
# convert the updated graph to an adjacency matrix
adjacency_matrix <- as_adjacency_matrix(graph_adj, sparse = TRUE)
adjacency_matrix <- Matrix::Matrix(as(adjacency_matrix, "sparseMatrix") > 0, sparse = TRUE)
adjacency_matrix
# extract the components for the ICAR model using the prep_icar_data function
extract_components <- prep_icar_data(adjacency_matrix)
# the extract_components object contains the following key elements:
# group_size is the total number of areal units observed in the shapefile
# node1 are indexes of the regions of interest - the focal areas in the adjacency matrix
# node2 shows corresponding neighbouring regions that are connected to the regions in node1. This defines spatial relationships
# n_edges represents the number of edges in the network, defining the spatial connections. It transforms the adjacency matrix (based on a Queen contiguity matrix) into a network structure showing which areas are directly connected to others
# extract key elements
n <- as.numeric(extract_components$group_size)
nod1 <- extract_components$node1
nod2 <- extract_components$node2
n_edges <- as.numeric(extract_components$n_ed)
# the outcome suicide_count, independent variables single_person_household_ratio, stress_awareness_rate, unemployment_rate, unmet_medical_needs_rate, and the offset variable expected_num need to be extracted into separate vectors
y <- model_df$suicide_count # outcome variable (suicide casualties)
# extract multiple independent variables into a matrix
X <- model_df %>%
st_drop_geometry() %>%
dplyr::select(single_person_household_ratio,
unemployment_rate,
unmet_medical_needs_rate) %>%
as.matrix()
e <- model_df$expected_num
stan_spatial_dataset <- list(
N = nrow(model_df) , # number of spatial units
N_edges = n_edges, # number of edges in spatial adjacency structure
node1 = nod1, # first node in adjacency structure
node2 = nod2, # second node in adjacency structure
Y = y, # outcome variable (suicide casualties)
X = X, # matrix of independent variables (3 predictors)
K = ncol(X), # number of independent variables (3)
Off_set = e # offset variable (expected_num)
)
# inspect
stan_spatial_dataset
exp(0.162965832)
summary(icar_poisson_fit, pars=c("alpha", "beta", "sigma"), probs=c(0.025, 0.975))$summary
exp(-0.286994952)
exp(0.011584418)
exp(-0.040434334)
exp(0.006820499)
# provide summary of ICAR poisson model
summary(icar_poisson_fit, pars=c("alpha", "beta", "sigma"), probs=c(0.025, 0.975))$summary
# print full table to avoid some rows from being omitted.
options(max.print = 100000)
# print the results
print(icar_poisson_fit, pars=c("alpha", "beta", "rr_alpha", "rr_beta", "rr_mu", "sigma"), probs=c(0.025, 0.975))
# the outcome suicide_count, independent variables single_person_household_ratio, stress_awareness_rate, unemployment_rate, unmet_medical_needs_rate, and the offset variable expected_num need to be extracted into separate vectors
y <- model_df$suicide_count # outcome variable (suicide casualties)
# extract multiple independent variables into a matrix
X <- model_df %>%
st_drop_geometry() %>%
dplyr::select(single_person_household_ratio,
stress_awareness_rate,
unemployment_rate,
unmet_medical_needs_rate) %>%
as.matrix()
e <- model_df$expected_num
stan_spatial_dataset <- list(
N = nrow(model_df) , # number of spatial units
N_edges = n_edges, # number of edges in spatial adjacency structure
node1 = nod1, # first node in adjacency structure
node2 = nod2, # second node in adjacency structure
Y = y, # outcome variable (suicide casualties)
X = X, # matrix of independent variables (3 predictors)
K = ncol(X), # number of independent variables (3)
Off_set = e # offset variable (expected_num)
)
# inspect
stan_spatial_dataset
# start the clock
ptm <- proc.time()
# fit icar_poisson_stan model
icar_poisson_fit = stan("icar_poisson_model.stan",
data = stan_spatial_dataset,
iter = 12000,
warmup = 6000,
control = list(adapt_delta = 0.99, max_treedepth = 12),
chain = 6,
verbose = FALSE)
# stop the clock
proc.time() - ptm
summary(icar_poisson_fit, pars=c("alpha", "beta", "sigma"), probs=c(0.025, 0.975))$summary
exp(-0.038103413)
