off_set = model_df_sp$expected_num, # row expected cases
phi_nb = 1.28132) # over-dispersion parameter from negative binomial regression
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
min(model_df$expected_num)
min(model_df_sp$expected_num)
# load required packages for spatial analysis, Bayesian modelling, and data manipulation
# provides tools for handling spatial data in R
library(sf)
# used for visualising spatial data
library(tmap)
# supports spatial dependence modelling (e.g., neighbours and spatial weights)
library(spdep)
# interface to Stan for Bayesian statistical modelling
library(rstan)
# contains functions for preparing spatial adjacency structures for Stan - specifically, we will use shape2mat() and prep_icar_data() to create adjacency matrices as nodes and edges
library(geostan)
# provides functions for epidemiological spatial analysis, including expected() to calculate expected counts in disease mapping
library(SpatialEpi)
# used for working with Bayesian posterior distributions, including managing posterior estimates and calculating exceedance probabilities
library(tidybayes)
# used for data wrangling, visualisation, and manipulation
library(tidyverse)
# manages file paths reliably across different operating systems
library(here)
# reads in xls an xlsx files
library(readxl)
# enables unit setting for st_area()
library(units)
# enables data visualisation
library(ggplot2)
# allows the user to perform model validation and comparison
library(loo)
# gives us access to glm.nb() to estimate the dispersion parameter for use in Bayesian model
library(MASS)
# 1. load South Korean municipalities (City/County/District) dataset
sk_municipalities_2022 <- st_read(here::here("SIG_20221119", "sig.shp"), options = "ENCODING=CP949") %>%
dplyr::select(SIG_CD, SIG_KOR_NM) %>%
dplyr::rename(
code = SIG_CD,
name = SIG_KOR_NM
)
# 2. read and process municipalities mapping
municipalities_mapping <- read_csv(here::here("mapping", "administrative_area_codes.csv"),
locale = locale(encoding = "UTF-8"),
col_types = cols("법정동코드" = col_character())
) %>%
dplyr::rename(
code = "법정동코드",
name = "법정동명",
status = "폐지여부"
) %>%
dplyr::filter(status == "존재") %>%
dplyr::filter(str_detect(code, "00000$")) %>%
dplyr::mutate(code = str_remove(code, "00000$")) %>%
dplyr::select(code, name) %>%
dplyr::mutate(name = str_replace(name, "^전북특별자치도", "전라북도"),
name = str_replace(name, "^강원특별자치도", "강원도"),
name = str_replace(name, "^제주특별자치도", "제주도")
)
# 3. map municipality data to shapefile
sk_municipalities_mapped <- sk_municipalities_2022 %>%
dplyr::left_join(municipalities_mapping, by="code") %>%
dplyr::mutate(name.y = case_when(
str_starts(code, "42") & is.na(name.y) ~ paste("강원도", name.x),
str_starts(code, "45") & is.na(name.y) ~ paste("전라북도", name.x),
str_starts(code, "47") & is.na(name.y) ~ paste("경상북도", name.x),
TRUE ~ name.y
)) %>%
dplyr::select(code, name.y) %>%
dplyr::rename(name = name.y)
# 4. split dataset for spatial merging (we are doing this only for ordinary cities, as we the data we have cannot accommodate districts within ordinary cities)
sk_municipalities_1 <- sk_municipalities_mapped[1:75, ] # keep first 75 rows unchanged
sk_municipalities_2 <- sk_municipalities_mapped[76:nrow(sk_municipalities_mapped), ] # rows 76 onward
# 5. group districts into parent cities
sk_municipalities_2 <- sk_municipalities_2 %>%
mutate(city = case_when(
str_detect(name, "수원시") ~ "경기도 수원시",
str_detect(name, "성남시") ~ "경기도 성남시",
str_detect(name, "안양시") ~ "경기도 안양시",
str_detect(name, "안산시") ~ "경기도 안산시",
str_detect(name, "고양시") ~ "경기도 고양시",
str_detect(name, "용인시") ~ "경기도 용인시",
str_detect(name, "청주시") ~ "충청북도 청주시",
str_detect(name, "천안시") ~ "충청남도 천안시",
str_detect(name, "전주시") ~ "전라북도 전주시",
str_detect(name, "포항시") ~ "경상북도 포항시",
str_detect(name, "창원시") ~ "경상남도 창원시",
TRUE ~ name # keep other names unchanged
))
sk_municipalities_2 <- sk_municipalities_2 %>%
dplyr::group_by(city) %>%
dplyr::summarise(geometry = st_union(geometry, .groups = "drop"))
# merge back
sk_municipalities_merged <- dplyr::bind_rows(sk_municipalities_1, sk_municipalities_2) %>%
dplyr::mutate(name = coalesce(name, city)) %>%
dplyr::select(name)
# 6. clean and remap names
sk_municipalities_remapped <- sk_municipalities_merged %>%
dplyr::left_join(municipalities_mapping, by = "name")%>%
dplyr::select(code, name) %>%
# manually address discrepancy in '군위군' - the country was integrated into Daegu metropolitan area only in 2023
dplyr::mutate(code = case_when(
name == "경상북도 군위군" ~ "47720",
TRUE ~ code
)) %>%
dplyr::mutate(code = as.integer(code)) %>%
dplyr::arrange(code)
View(sk_municipalities_remapped)
suicide_rate <- read_excel(here::here("variables", "target variable", "suicide_rate_per_100000_people_by_municipality.xlsx"))
suicide_rate <-  suicide_rate %>%
dplyr::rename(
municipality = "시군구별",
gender = "성별"
) %>%
dplyr::filter(gender == "계") %>% # keep only overall gender data
dplyr::filter(`2022` != "-") %>%
dplyr::select("municipality", "2022")
suicide_rate_clean <- suicide_rate %>%
# manually reconcile for disparate province or city names
dplyr::mutate(municipality = case_when(
row_number() == 134 ~ "강원도",
row_number() == 187 ~ "전라북도",
row_number() == 257 ~ "창원시",
TRUE ~ municipality
)) %>%
# identify and create rows for Province, Special & Metropolitan Cities, and ordinary cities within provinces
mutate(
is_province = str_detect(municipality, "도$"), # provinces (경기도, 강원도)
is_special_city = str_detect(municipality, "(특별시|광역시|특별자치시)$"), # special cities & metropolitan cities (특별시 / 광역시)
is_city = !is_special_city & str_detect(municipality, "시$"), # ordinary cities (시)
is_district = str_detect(municipality, "구$"), # districts within cities (구)
is_county = str_detect(municipality, "군$") # counties within provinces
) %>%
# fill province, special city, city, district, and county information
mutate(
province = ifelse(is_province, municipality, NA),
special_city = ifelse(is_special_city, municipality, NA),
city = ifelse(is_city, str_trim(municipality), NA),
district = ifelse(is_district, str_trim(municipality), NA),
county = ifelse(is_county, str_trim(municipality), NA)) %>%
# fill provinces downward
fill(province, .direction = "down") %>%
# fill special cities downward and filter for correct results
fill(special_city, .direction = "down") %>%
mutate(special_city = ifelse(row_number() >= 85, NA, special_city)) %>%
# fill cities downward and filter for correct results
fill(city, .direction = "down") %>%
mutate(city = ifelse(is_province | is_county, NA, city)) %>%
# concatenate province, special city, city, district, and countries according to logic
dplyr::mutate(municipality_clean = case_when(
is.na(province) & !is.na(special_city) & is.na(city) & !is.na(district) & is.na(county) ~ paste(special_city, district),
is.na(province) & !is.na(special_city) & is.na(city) & is.na(district) & !is.na(county) ~ paste(special_city, county),
is.na(province) & !is.na(special_city) & !is.na(city) & is.na(district) & is.na(county) ~ "세종특별자치시",
is.na(province) & !is.na(special_city) & is.na(city) & is.na(district) & !is.na(county) ~ paste(special_city, county),
!is.na(province) & is.na(special_city) & !is.na(city) & !is.na(district) & is.na(county) ~ paste(province, city, district),
!is.na(province) & is.na(special_city) & !is.na(city) & is.na(district) & is.na(county) ~ paste(province, city),
!is.na(province) & is.na(special_city) & is.na(city) & is.na(district) & !is.na(county) ~ paste(province, county),
TRUE ~ NA
)
)%>%
# filter out NA values in municipality_clean as they are aggregate values we do not concern ourselves with
dplyr::filter(!is.na(municipality_clean)) %>%
dplyr::rename(suicide_rate = `2022`) %>%
dplyr::select(municipality_clean, suicide_rate) %>%
dplyr::mutate(suicide_rate = as.numeric(suicide_rate))
View(suicide_rate_clean)
suicide_rate_municipality <- sk_municipalities_remapped %>%
dplyr::left_join(., suicide_rate_clean, by=c("name" = "municipality_clean")) %>%
dplyr::select(code, name, suicide_rate)
View(suicide_rate_municipality)
single_person_household <- read_excel(here::here("variables", "predictor variable", "single_person_household_ratio_by_municipality_2022.xlsx"), col_names=TRUE) %>%
dplyr::select("행정구역별", "1인가구비율<br>(A÷B×100) (%)") %>%
dplyr::rename(
municipality = "행정구역별",
single_person_household_ratio = "1인가구비율<br>(A÷B×100) (%)"
)
single_person_household_clean <- single_person_household %>%
# manually reconcile for disparate province or city names
dplyr::mutate(municipality = case_when(
row_number() == 116 ~ "강원도",
row_number() == 163 ~ "전라북도",
row_number() == 244 ~ "제주도",
TRUE ~ municipality)) %>%
# identify and create rows for Province, Special & Metropolitan Cities, and ordinary cities within provinces
mutate(
is_province = str_detect(municipality, "도$"), # provinces (경기도, 강원도)
is_special_city = str_detect(municipality, "(특별시|광역시|특별자치시)$"), # special cities & metropolitan cities (특별시 / 광역시)
is_city = !is_special_city & str_detect(municipality, "시$"), # ordinary cities (시)
is_district = str_detect(municipality, "구$"), # districts within cities (구)
is_county = str_detect(municipality, "군$") # counties within provinces
) %>%
# fill province, special city, city, district, and county information
mutate(
province = ifelse(is_province, municipality, NA),
special_city = ifelse(is_special_city, municipality, NA),
city = ifelse(is_city, str_trim(municipality), NA),
district = ifelse(is_district, str_trim(municipality), NA),
county = ifelse(is_county, str_trim(municipality), NA)) %>%
# fill provinces downward
fill(province, .direction = "down") %>%
# fill special cities downward and filter for correct results
fill(special_city, .direction = "down") %>%
mutate(special_city = ifelse(row_number() >= 85, NA, special_city)) %>%
# fill cities downward and filter for correct results
fill(city, .direction = "down") %>%
mutate(city = ifelse(is_province | is_county, NA, city)) %>%
# concatenate province, special city, city, district, and countries according to logic
dplyr::mutate(municipality_clean = case_when(
is.na(province) & !is.na(special_city) & is.na(city) & !is.na(district) & is.na(county) ~ paste(special_city, district),
is.na(province) & !is.na(special_city) & is.na(city) & is.na(district) & !is.na(county) ~ paste(special_city, county),
is.na(province) & special_city == "세종특별자치시" & is.na(city) & is.na(district) & is.na(county) ~ "세종특별자치시",
is.na(province) & !is.na(special_city) & is.na(city) & is.na(district) & !is.na(county) ~ paste(special_city, county),
!is.na(province) & is.na(special_city) & !is.na(city) & is.na(district) & is.na(county) ~ paste(province, city),
!is.na(province) & is.na(special_city) & is.na(city) & is.na(district) & !is.na(county) ~ paste(province, county),
TRUE ~ NA
))%>%
# filter out NA values in municipality_clean as they are aggregate values we do not concern ourselves with
dplyr::filter(!is.na(municipality_clean)) %>%
dplyr::select(municipality_clean, single_person_household_ratio) %>%
dplyr::mutate(single_person_household_ratio = as.numeric(single_person_household_ratio))
View(single_person_household_clean)
stress_awareness_rate <- read_excel(here::here("variables", "predictor variable", "stress_awareness_rate_by_municipality_2022_2024.xlsx"), col_names=TRUE) %>%
dplyr::select("행정구역별", "2022") %>%
dplyr::rename(
municipality = "행정구역별",
stress_awareness_rate = "2022"
)
stress_awareness_rate_clean <- stress_awareness_rate %>%
# manually reconcile for disparate province or city names
dplyr::mutate(municipality = case_when(
row_number() == 115 ~ "강원도",
row_number() == 137 ~ "청주시",
row_number() == 162 ~ "전라북도",
row_number() == 225 ~ "창원시",
row_number() == 243 ~ "제주도",
TRUE ~ municipality)) %>%
bind_rows(
stress_awareness_rate %>%
filter(str_starts(municipality, "제주")) %>%
slice(rep(1:n(), each = 2))) %>%
dplyr::mutate(municipality = case_when(
row_number() == 244 ~ "제주시",
row_number() == 245 ~ "서귀포시",
TRUE ~ municipality)) %>%
# identify and create rows for Province, Special & Metropolitan Cities, and ordinary cities within provinces
mutate(
is_province = str_detect(municipality, "도$"), # provinces (경기도, 강원도)
is_special_city = str_detect(municipality, "(특별시|광역시|특별자치시)$"), # special cities & metropolitan cities (특별시 / 광역시)
is_city = !is_special_city & str_detect(municipality, "시$"), # ordinary cities (시)
is_district = str_detect(municipality, "구$"), # districts within cities (구)
is_county = str_detect(municipality, "군$") # counties within provinces
) %>%
# fill province, special city, city, district, and county information
mutate(
province = ifelse(is_province, municipality, NA),
special_city = ifelse(is_special_city, municipality, NA),
city = ifelse(is_city, str_trim(municipality), NA),
district = ifelse(is_district, str_trim(municipality), NA),
county = ifelse(is_county, str_trim(municipality), NA)) %>%
# fill provinces downward
fill(province, .direction = "down") %>%
# fill special cities downward and filter for correct results
fill(special_city, .direction = "down") %>%
mutate(special_city = ifelse(row_number() >= 83, NA, special_city)) %>%
# fill cities downward and filter for correct results
fill(city, .direction = "down") %>%
mutate(city = ifelse(is_province | is_county, NA, city)) %>%
# concatenate province, special city, city, district, and countries according to logic
dplyr::mutate(municipality_clean = case_when(
is.na(province) & !is.na(special_city) & is.na(city) & !is.na(district) & is.na(county) ~ paste(special_city, district),
is.na(province) & !is.na(special_city) & is.na(city) & is.na(district) & !is.na(county) ~ paste(special_city, county),
is.na(province) & special_city == "세종특별자치시" & is.na(city) & is.na(district) & is.na(county) ~ "세종특별자치시",
is.na(province) & !is.na(special_city) & is.na(city) & is.na(district) & !is.na(county) ~ paste(special_city, county),
!is.na(province) & is.na(special_city) & !is.na(city) & is.na(district) & is.na(county) ~ paste(province, city),
!is.na(province) & is.na(special_city) & is.na(city) & is.na(district) & !is.na(county) ~ paste(province, county),
TRUE ~ NA
))%>%
# filter out NA values in municipality_clean as they are aggregate values we do not concern ourselves with
dplyr::filter(!is.na(municipality_clean)) %>%
dplyr::select(municipality_clean, stress_awareness_rate) %>%
dplyr::mutate(stress_awareness_rate = as.numeric(stress_awareness_rate))
# inspect
View(stress_awareness_rate_clean)
unemployment_rate <- read_excel(here::here("variables", "predictor variable", "unemployment_rate_by_municipality_2022.xlsx"), col_names=TRUE) %>%
dplyr::select("행정구역별", "2022.2/2") %>%
dplyr::rename(
municipality = "행정구역별",
unemployment_rate = "2022.2/2"
)
unemployment_rate_clean <- unemployment_rate %>%
dplyr::mutate(municipality = str_replace(municipality, "^서울", "서울특별시")) %>%
dplyr::mutate(municipality = str_replace(municipality, "^(부산|대구|인천|광주|대전|울산)", "\\1광역시")) %>%
mutate(municipality = case_when(
# 경기도
str_detect(municipality, "^(수원시|성남시|의정부시|안양시|부천시|광명시|평택시|동두천시|안산시|고양시|과천시|구리시|남양주시|오산시|시흥시|군포시|의왕시|하남시|용인시|파주시|이천시|안성시|김포시|화성시|양주시|포천시|여주시|연천군|가평군|양평군)$") ~
str_c("경기도 ", municipality),
# 강원도
str_detect(municipality, "^(춘천시|원주시|강릉시|동해시|태백시|속초시|삼척시|홍천군|횡성군|영월군|평창군|정선군|철원군|화천군|양구군|인제군|고성군|양양군)$") ~
str_c("강원도 ", municipality),
# 충청북도
str_detect(municipality, "^(청주시|충주시|제천시|보은군|옥천군|영동군|진천군|괴산군|음성군|단양군|증평군)$") ~
str_c("충청북도 ", municipality),
# 충청남도
str_detect(municipality, "^(천안시|공주시|보령시|아산시|서산시|논산시|계룡시|당진시|금산군|부여군|서천군|청양군|홍성군|예산군|태안군)$") ~
str_c("충청남도 ", municipality),
# 전라북도
str_detect(municipality, "^(전주시|군산시|익산시|정읍시|남원시|김제시|완주군|진안군|무주군|장수군|임실군|순창군|고창군|부안군)$") ~
str_c("전라북도 ", municipality),
# 전라남도
str_detect(municipality, "^(목포시|여수시|순천시|나주시|광양시|담양군|곡성군|구례군|고흥군|보성군|화순군|장흥군|강진군|해남군|영암군|무안군|함평군|영광군|장성군|완도군|진도군|신안군)$") ~
str_c("전라남도 ", municipality),
# 경상북도
str_detect(municipality, "^(포항시|경주시|김천시|안동시|구미시|영주시|영천시|상주시|문경시|경산시|의성군|청송군|영양군|영덕군|청도군|고령군|성주군|칠곡군|예천군|봉화군|울진군|울릉군)$") ~
str_c("경상북도 ", municipality),
# 경상남도
str_detect(municipality, "^(진주시|통영시|사천시|김해시|밀양시|거제시|양산시|창원시|의령군|함안군|창녕군|고성군|남해군|하동군|산청군|함양군|거창군|합천군)$") ~
str_c("경상남도 ", municipality),
# 제주특별자치도
str_detect(municipality, "^(제주시|서귀포시)$") ~
str_c("제주도 ", municipality),
TRUE ~ municipality # there shouldn't be any exceptions
)) %>%
# manage discrepancies the above logic fails to capture
dplyr::mutate(municipality =
ifelse(str_detect(municipality, "대구광역시 군위군"),
"경상북도 군위군", municipality)) %>%
dplyr::mutate(municipality =
ifelse(row_number() == 220 & str_detect(municipality, "강원도 고성군"), "경상남도 고성군", municipality)) %>%
dplyr::mutate(municipality =
ifelse(row_number() == 100 & str_detect(municipality, "광주광역시시"), "경기도 광주시", municipality)) %>%
dplyr::rename(municipality_clean = municipality) %>%
dplyr::mutate(unemployment_rate = as.numeric(unemployment_rate))
# since we're missing the value for Sejong, we impute it using the values for geographically adjacent provinces
chungcheong_avg_unemployment <- unemployment_rate_clean %>%
filter(str_detect(municipality_clean, "충청북도|충청남도|대전광역시")) %>%
summarise(mean_unemployment = mean(unemployment_rate, na.rm = TRUE)) %>%
pull(mean_unemployment)
# check if Sejong already exists, add a new column for it with the calculated average
if(!any(unemployment_rate_clean$municipality_clean == "세종특별자치시")) {
sejong_unemployment <- tibble(
municipality_clean = "세종특별자치시",
unemployment_rate = round(chungcheong_avg_unemployment, 1)
)
unemployment_rate_clean <- unemployment_rate_clean %>%
bind_rows(sejong_unemployment)
}
# inspect
View(unemployment_rate_clean)
unmet_medical_needs <- read_excel(here::here("variables", "predictor variable", "unmet_medical_needs_rate_by_municipality_2022_2024.xlsx"), col_names=TRUE) %>%
dplyr::select("시군구별(1)", "시군구별(2)", "2022") %>%
dplyr::rename(
municipality_1 = "시군구별(1)",
municipality_2 = "시군구별(2)",
unmet_medical_needs_rate = "2022"
)
unmet_medical_needs_clean <- unmet_medical_needs %>%
dplyr::filter(municipality_2 != "소계") %>%
dplyr::mutate(municipality_1 = str_replace(municipality_1, "^전북특별자치도", "전라북도"),
municipality_1 = str_replace(municipality_1, "^강원특별자치도", "강원도"),
municipality_1 = str_replace(municipality_1, "^제주특별자치도", "제주도")
) %>%
dplyr::mutate(municipality_clean = paste(municipality_1, municipality_2)) %>%
dplyr::select(municipality_clean, unmet_medical_needs_rate) %>%
dplyr::mutate(unmet_medical_needs_rate = as.numeric(unmet_medical_needs_rate))
View(unmet_medical_needs_clean)
municipality_population_2022 <- read_excel(here::here("variables", "predictor variable", "resident_registration_population_by_administrative_district_2022.xlsx"), col_names=TRUE) %>%
dplyr::select("행정기관", "총인구수", "남자 인구수", "여자 인구수") %>%
dplyr::rename(
municipality = "행정기관",
total_population = "총인구수",
male_population = "남자 인구수",
female_population = "여자 인구수"
) %>%
dplyr::mutate(municipality = str_replace(municipality, "^제주특별자치도", "제주도"),
total_population = as.numeric(str_replace_all(total_population, ",", "")),
male_population = as.numeric(str_replace_all(male_population, ",", "")),
female_population = as.numeric(str_replace_all(female_population, ",", "")),) %>%
dplyr::filter(municipality == "세종특별자치시" | str_count(municipality, "\\s") == 1) %>%
dplyr::distinct() %>%
dplyr::rename(municipality_clean = municipality)
# inspect
View(municipality_population_2022)
kr_to_en_mapping <- read_excel(here::here("mapping", "korean_to_english_mapping.xlsx"))
model_df <- suicide_rate_municipality %>%
dplyr::left_join(., single_person_household_clean, by=c("name" = "municipality_clean")) %>%
dplyr::left_join(., stress_awareness_rate_clean, by=c("name" = "municipality_clean")) %>%
dplyr::left_join(., unemployment_rate_clean, by=c("name" = "municipality_clean")) %>%
dplyr::left_join(., unmet_medical_needs_clean, by=c("name" = "municipality_clean")) %>%
dplyr::left_join(., municipality_population_2022, by=c("name" = "municipality_clean")) %>%
dplyr::left_join(., kr_to_en_mapping, by=c("name" = "municipality_kr")) %>%
# unit in km^2
dplyr::mutate(., area = as.numeric(set_units(st_area(geometry), "km^2"))) %>%
dplyr::mutate(population_density_km2 = round((total_population / area),1)) %>%
# needs to be of integer type for modelling purposess
dplyr::mutate(suicide_count = as.integer(round(total_population * suicide_rate / 100000, 0))) %>%
dplyr::select(code, municipality_en, suicide_count, single_person_household_ratio, stress_awareness_rate, unemployment_rate, unmet_medical_needs_rate, population_density_km2, total_population) %>%
dplyr::rename(name = municipality_en)
View(model_df)
# quick diagnosis with variance-to-mean ratio
var(model_df$suicide_count) / mean(model_df$suicide_count)
var(model_df$suicide_count)
# Create histogram for suicide counts
ggplot(model_df, aes(x = suicide_count)) +
geom_histogram(binwidth = 5, fill = "darkblue", color = "white", alpha = 0.7) +
geom_density(aes(y = ..count.. * 5), color = "red", size = 1) +
labs(title = "Reported Number of Suicide in Korean Municipalities",
x = "Suicide Counts",
y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10))
# see lowest count
min(model_df$suicide_count)
# see highest count
max(model_df$suicide_count)
# since we are considering using the Negative Binomial Poisson Regression, let us estimate the over-dispersion parameter using the glm.nb() function
# fit negative binomial regression null model
nb_model <- glm.nb(suicide_count ~ 1, data=model_df)
# extract theta
theta <- nb_model$theta
theta
# the estimated over-dispersion parameter is 1.28132
# the theta (dispersion) parameter in a negatival binomial model controls the degree of overdispersion relative to a Poisson distribution
# a higher theta value suggests less overdisperison, while a lower theta value suggests more overdispersion
# my value is 1.28132, meaning the suicide_count data is overdispersed but not extremely so
# in a Poisson regression, the variance equals the mean (Var(Y) = E(Y))
# in a negative binomial model, variance is greater than the mean: Var(Y) = mu + mu^2 / theta
# NB model can be used to characterise count data where the majority of data points are clustered toward lower values of a variable
# When choosing between a negative binomial model and a Poisson model, use a negative binomial model if your count data exhibits overdispersion (variance greater than the mean), while a Poisson model is suitable when the variance is roughly equal to the mean in your count data; essentially, the negative binomial model is a more flexible option that can handle situations where the Poisson model's assumptions are not met
# in order to estimate the risk of casualties due to suicide across Korean municipalities, we will need to first obtain a column that contains estimated expected number of casualties. This is derived from the total_population column
model_df$expected_num <- round(expected(population = model_df$total_population, cases = model_df$suicide_count, n.strata = 1), 0)
View(model_df)
# this particular column expected_num is important, as it is used as an offset in our spatial model
# n.strata = 1 means that no stratification is being applied - the entire dataest is treated as a single stratum
# we will need a list of nodes and edges as Stan can only identify adjacency with a set of paired nodes with edges that connect them
# coerce into a spatial object
model_df_sp <- as(model_df, "Spatial")
# coerce into a matrix object
adjacency_matrix <- shape2mat(model_df_sp)
# extract the components for the ICAR model
extract_components <- prep_icar_data(adjacency_matrix)
# extract the components for the ICAR model
extract_components <- prep_icar_data(adjacency_matrix)
# the extract_components objectcontains the following key elements:
# group_size is the total number of areal units observed in the shapefile
# node1 are indexes of the regions of interest - the focal areas in the adjacency matrix
# node2 shows corresponding neighbouring regions that are connected to the regions in node1. This defines spatial relationships
# n_edges represents the number of edges in the network, defining the spatial connections. It transforms the adjacency matrix (based on a Queen contiguity matrix) into a network structure showing which areas are directly connected to others
# extraction
n <- as.numeric(extract_components$group_size)
node1 <- extract_components$node1
node2 <- extract_components$node2
n_edges <- as.numeric(extract_components$n_ed)
# we need to define the variables needed to be compiled in Stan
stan_spatial_dataset <- list(N = nrow(model_df_sp), # number of spatial units (municipalities)
N_edges = n_edges, # number of edges for ICAR model
node1 = node1, # adjacency structure
node2 = node2, # adjacency structure
suicide = model_df_sp$suicide_count, # outcome variable (counts)
sph_ratio = model_df_sp$single_person_household_ratio, # independent variables
stress_rate = model_df_sp$stress_awareness_rate,
unemp_rate = model_df_sp$unemployment_rate,
unmet_med = model_df_sp$unmet_medical_needs_rate,
pop_dens = model_df_sp$population_density_km2,
off_set = model_df_sp$expected_num, # row expected cases
phi_nb = 1.28132) # over-dispersion parameter from negative binomial regression
stan_spatial_dataset
min(model_df_sp$expected_num)
min(model_df_sp$expected_num)
max(model_df_sp$expected_num)
# we need to define the variables needed to be compiled in Stan
stan_spatial_dataset <- list(N = nrow(model_df_sp), # number of spatial units (municipalities)
N_edges = n_edges, # number of edges for ICAR model
node1 = node1, # adjacency structure
node2 = node2, # adjacency structure
suicide = model_df_sp$suicide_count, # outcome variable (counts)
sph_ratio = model_df_sp$single_person_household_ratio, # independent variables
stress_rate = model_df_sp$stress_awareness_rate,
unemp_rate = model_df_sp$unemployment_rate,
unmet_med = model_df_sp$unmet_medical_needs_rate,
pop_dens = model_df_sp$population_density_km2,
off_set = model_df_sp$expected_num, # row expected cases
overdispersion_parameter = 1.28132) # over-dispersion parameter from negative binomial regression
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
rstan:::rstudio_stanc("stan_spatial_model.stan")
